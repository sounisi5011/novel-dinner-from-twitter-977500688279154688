doctype html
block vars
html(lang="ja")
  include _head.pug
  body
    include _header.pug
    block contents
    include _footer.pug

    if includeResources && Array.isArray(includeResources)
      each srcData in includeResources
        if srcData
          -
            if (typeof srcData === 'string') {
              srcData = {src: srcData};
            }
            const scriptUrl = srcData.src;

            // https://w3c.github.io/webappsec-subresource-integrity/#the-integrity-attribute
            // https://www.w3.org/TR/CSP2/#source-list-syntax
            // Note: hash_algoの正規表現パターンは、2018/03/28現在のものです。
            //       将来、ブラウザは新しいハッシュアルゴリズムを導入する可能性があります。
            //       その場合、新しいハッシュアルゴリズムの導入に合わせてパターンを改良する必要があります。
            const integrityRegex = (() => {
              const vchar = String.raw`[\u0021-\u007E]`;
              const wsp = String.raw`[\u0020\u0009]`;

              const hash_algo = String.raw`(?:[A-Za-z0-9]+)`;
              const base64_value = String.raw`(?:(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]===|[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4}))`;

              const hash_expression = String.raw`(?:${hash_algo}-${base64_value})`;
              const option_expression = String.raw`(?:${vchar}*)`;
              const hash_with_options = String.raw`(?:${hash_expression}(?:\?${option_expression})*)`;
              const integrity_metadata = String.raw`(?:${wsp}*${hash_with_options}(?:${wsp}+${hash_with_options})*${wsp}*|${wsp}*)`;

              return new RegExp(`^${integrity_metadata}$`);
            })();

          if /\.js$/.test(scriptUrl)
            script(src=scriptUrl
              type=(srcData.type || false)
              charset=(srcData.charset || false)
              async=Boolean(srcData.async)
              defer=Boolean(srcData.defer)
              crossorigin=(srcData.crossorigin || false)
              integrity=(integrityRegex.test(srcData.integrity) ? srcData.integrity : false)
            )
